/*
MIT License

Copyright (c) 2016 Sascha Hanse
Copyright (c) 2017 Shinya Yagyu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
package giota

import (
	"encoding/json"
	"testing"
	"time"
)

// XXX: come up with more test cases that could ideally be
// 			shared accross implementations.

func TestNewTransactionFromTrits(t *testing.T) {
	var trytes Trytes
	//var hash Trytes = "IPQYUNLDGKCLJVEJGVVISSQYVDJJWOXCW9RZXIDFKMBXDVZDXFBZNZJKBSTIMBKAXHFTGETEIPTZGNTJK"
	out := Transaction{
		SignatureMessageFragment
		Address:                  "A9RGRKVGWMWMKOLVMDFWJUHNUNYWZTJADGGPZGXNLERLXYWJE9WQHWWBMCPZMVVMJUMWWBLZLNMLDCGDJ",
		Value:                    0,
		Tag:                      "999999999999999999999999999",
		Timestamp:                time.Unix(1482522289, 0),
		CurrentIndex:             0,
		LastIndex:                0,
		Bundle:                   "TXEFLKNPJRBYZPORHZU9CEMFIFVVQBUSTDGSJCZMBTZCDTTJVUFPTCCVHHORPMGCURKTH9VGJIXUQJVHK",
		Nonce:                    "999999999999999999999999999999999999999999999999999999999999999999999999999999999",
		TrunkTransaction:         "999999999999999999999999999999999999999999999999999999999999999999999999999999999",
		BranchTransaction:        "999999999999999999999999999999999999999999999999999999999999999999999999999999999",
	}

	tt, err := NewTransaction(trytes)
	if err != nil {
		t.Fatalf("TransactionFromTrits() expected err to be %#v but got %#v", nil, err)
	}

	if out.Trytes() != tt.Trytes() {
		t.Errorf("TransactionFromTrits()\nwant: %#v\nhave: %#v", out, tt)
	}

	js, err := json.Marshal(tt)
	if err != nil {
		t.Error(err)
	}

	if trytes != Trytes(js[1:len(js)-1]) {
		t.Error("transaction marshaller is incorrect.")
	}

	var tt2 Transaction
	if err := json.Unmarshal([]byte(`"`+trytes+`"`), &tt2); err != nil {
		t.Error(err)
	}

	if tt.Trytes() != tt2.Trytes() {
		t.Error("transaction unmarshaller is incorrect.")
	}

	//t.Logf("tt: %#v\n", tt)
}

func TestNonce(t *testing.T) {
	var trytes Trytes
	tx, err := NewTransaction(trytes)
	if err != nil {
		t.Fatal(err)
	}

	if !tx.HasValidNonce(DefaultMinWeightMagnitude) {
		t.Error("cannot validate nonce")
	}
}

func TestTransaction_Hash(t *testing.T) {
	tests := []struct {
		name    string
		trytes  Trytes
		hashP81 Trytes
	}{
		{
			name:    "test 1",
			trytes
			hashP81: "WZWSSZGBNFPYFYVHQQUKFJYBIEEPOXMPVOWYPRMRJBQVXJOSBXCAWJTXSCGRZX9VTFJJZVXTWWYDWONQQ",
		},
		{
			name:    "test 2",
			trytes
			hashP81: "WPM9JCTQH9QHBHBJCODWDNPSLFLQDZADRAEZTZDL9OEGTVRZARVLVJHZIMPBPCTAIYJKWTUSRKNNTMFOQ",
		},
	}

	for _, tt := range tests {
		// test input trytes hash
		if tt.trytes.Hash() != tt.hashP81 {
			t.Errorf("%s: trytes p81 hash is illegal %s\n", tt.name, tt.trytes.Hash())
		}

		// create tx from trytes
		tx, err := NewTransaction(tt.trytes)
		if err != nil {
			t.Fatalf("%s: NewTransaction gave err: %s", tt.name, err)
		}

		// test tx hash
		if tx.Hash() != tt.hashP81 {
			t.Errorf("%s: hashes dont match. tx.Hash(): %s, hashP81: %s",
				tt.name, tx.Hash(), tt.hashP81)
		}
	}
}
